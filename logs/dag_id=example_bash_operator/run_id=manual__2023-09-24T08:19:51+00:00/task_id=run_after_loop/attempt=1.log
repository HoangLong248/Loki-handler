[2023-09-24T08:19:58.773+0000] {param.py:354} DEBUG - Updating task params ({'example_key': 'example_value'}) with DagRun.conf ({'example_key': 'example_value'})
[2023-09-24T08:19:58.784+0000] {taskinstance.py:1092} DEBUG - previous_execution_date was called
[2023-09-24T08:19:58.812+0000] {__init__.py:51} DEBUG - Loading core task runner: StandardTaskRunner
[2023-09-24T08:19:58.825+0000] {param.py:354} DEBUG - Updating task params ({'example_key': 'example_value'}) with DagRun.conf ({'example_key': 'example_value'})
[2023-09-24T08:19:58.835+0000] {taskinstance.py:1092} DEBUG - previous_execution_date was called
[2023-09-24T08:19:58.845+0000] {base_task_runner.py:68} DEBUG - Planning to run as the  user
[2023-09-24T08:19:58.856+0000] {taskinstance.py:842} DEBUG - Refreshing TaskInstance <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> from DB
[2023-09-24T08:19:58.890+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Task Instance Not Running' PASSED: True, Task is not in running state.
[2023-09-24T08:19:58.891+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Not In Retry Period' PASSED: True, The task instance was not marked for retrying.
[2023-09-24T08:19:58.906+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Task Instance State' PASSED: True, Task state queued was valid.
[2023-09-24T08:19:58.907+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Previous Dagrun State' PASSED: True, The task did not have depends_on_past set.
[2023-09-24T08:19:58.907+0000] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]>
[2023-09-24T08:19:58.911+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Task Concurrency' PASSED: True, Task concurrency is not set.
[2023-09-24T08:19:58.912+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Not In Retry Period' PASSED: True, The task instance was not marked for retrying.
[2023-09-24T08:19:58.924+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Pool Slots Available' PASSED: True, There are enough open slots in default_pool to execute the task
[2023-09-24T08:19:58.924+0000] {taskinstance.py:1166} DEBUG - <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]> dependency 'Previous Dagrun State' PASSED: True, The task did not have depends_on_past set.
[2023-09-24T08:19:58.925+0000] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [queued]>
[2023-09-24T08:19:58.925+0000] {taskinstance.py:1359} INFO - Starting attempt 1 of 1
[2023-09-24T08:19:58.949+0000] {taskinstance.py:1380} INFO - Executing <Task(BashOperator): run_after_loop> on 2023-09-24 08:19:51+00:00
[2023-09-24T08:19:58.955+0000] {standard_task_runner.py:57} INFO - Started process 1730 to run task
[2023-09-24T08:19:58.960+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'example_bash_operator', 'run_after_loop', 'manual__2023-09-24T08:19:51+00:00', '--job-id', '64', '--raw', '--subdir', 'DAGS_FOLDER/example_bashoperator.py', '--cfg-path', '/tmp/tmpx34b3_uc']
[2023-09-24T08:19:58.963+0000] {standard_task_runner.py:85} INFO - Job 64: Subtask run_after_loop
[2023-09-24T08:19:58.964+0000] {cli_action_loggers.py:67} DEBUG - Calling callbacks: [<function default_action_log at 0x7f199406d550>]
[2023-09-24T08:19:59.015+0000] {param.py:354} DEBUG - Updating task params ({'example_key': 'example_value'}) with DagRun.conf ({'example_key': 'example_value'})
[2023-09-24T08:19:59.026+0000] {taskinstance.py:1092} DEBUG - previous_execution_date was called
[2023-09-24T08:19:59.034+0000] {task_command.py:415} INFO - Running <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [running]> on host 99e69330c0f0
[2023-09-24T08:19:59.035+0000] {settings.py:353} DEBUG - Disposing DB connection pool (PID 1730)
[2023-09-24T08:19:59.035+0000] {settings.py:212} DEBUG - Setting up DB connection pool (PID 1730)
[2023-09-24T08:19:59.036+0000] {settings.py:285} DEBUG - settings.prepare_engine_args(): Using NullPool
[2023-09-24T08:19:59.038+0000] {taskinstance.py:842} DEBUG - Refreshing TaskInstance <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [running]> from DB
[2023-09-24T08:19:59.077+0000] {param.py:354} DEBUG - Updating task params ({'example_key': 'example_value'}) with DagRun.conf ({'example_key': 'example_value'})
[2023-09-24T08:19:59.092+0000] {taskinstance.py:1092} DEBUG - previous_execution_date was called
[2023-09-24T08:19:59.106+0000] {taskinstance.py:923} DEBUG - Clearing XCom data
[2023-09-24T08:19:59.113+0000] {retries.py:93} DEBUG - Running RenderedTaskInstanceFields.write with retries. Try 1 of 3
[2023-09-24T08:19:59.152+0000] {retries.py:93} DEBUG - Running RenderedTaskInstanceFields._do_delete_old_records with retries. Try 1 of 3
[2023-09-24T08:19:59.166+0000] {taskinstance.py:1660} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='example_bash_operator' AIRFLOW_CTX_TASK_ID='run_after_loop' AIRFLOW_CTX_EXECUTION_DATE='2023-09-24T08:19:51+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-09-24T08:19:51+00:00'
[2023-09-24T08:19:59.166+0000] {__init__.py:116} DEBUG - Preparing lineage inlets and outlets
[2023-09-24T08:19:59.167+0000] {__init__.py:157} DEBUG - inlets: [], outlets: []
[2023-09-24T08:19:59.168+0000] {bash.py:186} DEBUG - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='example_bash_operator' AIRFLOW_CTX_TASK_ID='run_after_loop' AIRFLOW_CTX_EXECUTION_DATE='2023-09-24T08:19:51+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-09-24T08:19:51+00:00'
[2023-09-24T08:19:59.168+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-09-24T08:19:59.169+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'echo 1']
[2023-09-24T08:19:59.180+0000] {subprocess.py:86} INFO - Output:
[2023-09-24T08:19:59.182+0000] {subprocess.py:93} INFO - 1
[2023-09-24T08:19:59.183+0000] {subprocess.py:97} INFO - Command exited with return code 0
[2023-09-24T08:19:59.204+0000] {__init__.py:74} DEBUG - Lineage called with inlets: [], outlets: []
[2023-09-24T08:19:59.205+0000] {taskinstance.py:842} DEBUG - Refreshing TaskInstance <TaskInstance: example_bash_operator.run_after_loop manual__2023-09-24T08:19:51+00:00 [running]> from DB
[2023-09-24T08:19:59.218+0000] {taskinstance.py:1456} DEBUG - Clearing next_method and next_kwargs.
[2023-09-24T08:19:59.219+0000] {taskinstance.py:1398} INFO - Marking task as SUCCESS. dag_id=example_bash_operator, task_id=run_after_loop, execution_date=20230924T081951, start_date=20230924T081958, end_date=20230924T081959
[2023-09-24T08:19:59.219+0000] {taskinstance.py:2428} DEBUG - Task Duration set to 0.311253
[2023-09-24T08:19:59.234+0000] {cli_action_loggers.py:85} DEBUG - Calling callbacks: []
[2023-09-24T08:19:59.255+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 0
[2023-09-24T08:19:59.283+0000] {dagrun.py:734} DEBUG - number of tis tasks for <DagRun example_bash_operator @ 2023-09-24 08:19:51+00:00: manual__2023-09-24T08:19:51+00:00, state:running, queued_at: 2023-09-24 08:19:53.565673+00:00. externally triggered: True>: 4 task(s)
[2023-09-24T08:19:59.284+0000] {taskinstance.py:2776} INFO - 0 downstream tasks scheduled from follow-on schedule check
